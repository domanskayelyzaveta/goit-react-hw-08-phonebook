{"version":3,"file":"static/js/422.b7fb40b8.chunk.js","mappings":"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","sources":["components/ContactList/ContactList.styled.jsx","components/ContactList/ContactList.jsx","components/ContactsForm/ContactForm.styled.jsx","components/ContactsForm/ContactsForm.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","pages/Contacts.jsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const Button = styled.button`\n  height: 18px;\n  width: 60px;\n  font-size: 10px;\n  border-radius: 4px;\n  margin-left: 10px;\n  background-color: rgb(241, 173, 217);\n  border: 1px solid grey;\n  color: rgb(74, 74, 74);\n`;\n","import React from 'react';\nimport { nanoid } from 'nanoid';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectFilterContacts } from 'redux/selectors';\nimport { requestDeleteContactThunk } from 'redux/thunks';\nimport { Button } from './ContactList.styled';\n\nexport const ContactList = () => {\n  const contacts = useSelector(selectFilterContacts);\n  const dispatch = useDispatch();\n\n  const onDelete = id => {\n    dispatch(requestDeleteContactThunk(id));\n  };\n  return (\n    <div>\n      <ul>\n        {contacts.map(({ id, name, number }) => (\n          <li key={nanoid()}>\n            {name} : {number}\n            <Button\n              id={nanoid(id)}\n              className=\"contactListBtn\"\n              type=\"button\"\n              onClick={() => onDelete(id)}\n            >\n              Delete\n            </Button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import styled from '@emotion/styled';\n\nexport const Container = styled.div`\n  padding-left: 40px;\n`;\n\nexport const Label = styled.label`\n  margin-left: 10px;\n  margin-bottom: 5px;\n  font-size: 18px;\n  font-weight: bold;\n`;\n\nexport const Input = styled.input`\n  margin-right: 10px;\n`;\n\nexport const Button = styled.button``;\n","import { nanoid } from 'nanoid';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { requestAddContactThunk } from 'redux/thunks';\nimport { selectContacts } from 'redux/selectors';\nimport { Button, Container, Input, Label } from './ContactForm.styled';\n\nconst ContactsForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n\n  const formatPhoneNumber = event => {\n    const input = event.target;\n    let value = input.value.replace(/\\D/g, '');\n\n    if (value.length > 6) {\n      value = value.replace(/(\\d{3})(\\d{2})(\\d{2})/, '$1-$2-$3');\n    }\n\n    input.value = value;\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n\n    const name = event.currentTarget.elements.name.value;\n    const number = event.currentTarget.elements.number.value;\n\n    if (\n      contacts.some(\n        contact => contact.name === name && contact.number === number\n      )\n    ) {\n      alert(`\"${name}\" is already in contacts!`);\n    } else {\n      dispatch(requestAddContactThunk({ name, number }));\n      event.currentTarget.reset();\n    }\n  };\n\n  return (\n    <Container>\n      <form onSubmit={handleSubmit}>\n        <h2>Contacts</h2>\n        <Label>Name:</Label>\n        <Input\n          type=\"text\"\n          name=\"name\"\n          required\n          id={nanoid()}\n          placeholder=\"Ivan\"\n        />\n        <Label>Number:</Label>\n        <Input\n          type=\"tel\"\n          name=\"number\"\n          required\n          placeholder=\"000-00-00\"\n          onInput={formatPhoneNumber}\n        />\n        <Button type=\"submit\">Add contact</Button>\n      </form>\n    </Container>\n  );\n};\n\nexport default ContactsForm;\n","import styled from '@emotion/styled';\n\nexport const Title = styled.h2`\n  margin-left: 20px;\n  margin-top: 25px;\n  font-size: 20px;\n`;\n\nexport const Paragraph = styled.p`\n  margin-left: 20px;\n  color: grey;\n`;\n\nexport const Input = styled.input`\n  width: 200px;\n  height: 30px;\n  margin-left: 20px;\n  margin-bottom: 10px;\n`;\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectFilter } from 'redux/selectors';\nimport { onFilterChange } from 'redux/phoneBookReducer';\nimport { Input, Paragraph, Title } from './Filter.styled';\n\nexport const Filter = ({ type }) => {\n  const filter = useSelector(selectFilter);\n  const dispatch = useDispatch();\n  const onFilter = event => {\n    const inputValue = event.target.value;\n    dispatch(onFilterChange(inputValue));\n  };\n  return (\n    <div>\n      <Title>Contacts</Title>\n      <Paragraph>Find contact by name</Paragraph>\n      <Input type={type} value={filter} onChange={onFilter}></Input>\n    </div>\n  );\n};\n","import { ContactList } from 'components/ContactList/ContactList';\n// import { Filter } from 'components/Filter/Filter';\n// import { onFilterChange } from 'redux/phoneBookReducer';\nimport ContactsForm from 'components/ContactsForm/ContactsForm';\nimport { Filter } from 'components/Filter/Filter';\nimport React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n// import { useNavigate } from 'react-router-dom';\nimport { selectUserData } from 'redux/selectors';\nimport { requestPhoneBookThunk } from 'redux/thunks';\n\nconst Contacts = () => {\n  const dispatch = useDispatch();\n  const userData = useSelector(selectUserData);\n  // const contacts = useSelector(selectContacts);\n  // const filter = useSelector(selectFilter);\n\n  useEffect(() => {\n    if (!userData) return;\n    dispatch(requestPhoneBookThunk());\n  }, [dispatch, userData]);\n\n  // const handleFormSubmit = ({ name, phone }) => {\n  //   const hasDuplicateContacts = contacts.some(\n  //     contact => contact.name === name && contact.phone === phone\n  //   );\n  //   if (hasDuplicateContacts) {\n  //     alert(`\"${name}\" is already in contacts!`);\n  //     return;\n  //   }\n  //   dispatch(requestAddContactThunk({ name, phone }));\n  // };\n\n  return (\n    <div>\n      <ContactsForm />\n      <Filter label=\"Name\" type=\"text\" />\n      <ContactList />\n    </div>\n  );\n};\n\nexport default Contacts;\n"],"names":["Button","styled","ContactList","contacts","useSelector","selectFilterContacts","dispatch","useDispatch","map","id","name","number","nanoid","className","type","onClick","requestDeleteContactThunk","onDelete","Container","Label","Input","selectContacts","onSubmit","event","preventDefault","currentTarget","elements","value","some","contact","alert","requestAddContactThunk","reset","required","placeholder","onInput","input","target","replace","length","Title","Paragraph","Filter","filter","selectFilter","onChange","inputValue","onFilterChange","userData","selectUserData","useEffect","requestPhoneBookThunk","label"],"sourceRoot":""}