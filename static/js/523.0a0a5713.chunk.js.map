{"version":3,"file":"static/js/523.0a0a5713.chunk.js","mappings":"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","sources":["../node_modules/nanoid/index.browser.js","components/ContactList/ContactList.styled.jsx","components/ContactList/ContactList.jsx","components/ContactsForm/ContactForm.styled.jsx","components/ContactsForm/ContactsForm.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","pages/Contacts.jsx"],"sourcesContent":["export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n","import styled from '@emotion/styled';\n\nexport const Button = styled.button`\n  height: 18px;\n  width: 60px;\n  font-size: 10px;\n  border-radius: 4px;\n  margin-left: 10px;\n  background-color: rgb(241, 173, 217);\n  border: 1px solid grey;\n  color: rgb(74, 74, 74);\n`;\n","import React from 'react';\nimport { nanoid } from 'nanoid';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectFilterContacts } from 'redux/selectors';\nimport { requestDeleteContactThunk } from 'redux/thunks';\nimport { Button } from './ContactList.styled';\n\nexport const ContactList = () => {\n  const contacts = useSelector(selectFilterContacts);\n  const dispatch = useDispatch();\n\n  const onDelete = id => {\n    dispatch(requestDeleteContactThunk(id));\n  };\n  return (\n    <div>\n      <ul>\n        {contacts.map(({ id, name, number }) => (\n          <li key={nanoid()}>\n            {name} : {number}\n            <Button\n              id={nanoid(id)}\n              className=\"contactListBtn\"\n              type=\"button\"\n              onClick={() => onDelete(id)}\n            >\n              Delete\n            </Button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import styled from '@emotion/styled';\n\nexport const Container = styled.div`\n  padding-left: 40px;\n`;\n\nexport const Label = styled.label`\n  margin-left: 10px;\n  margin-bottom: 5px;\n  font-size: 18px;\n  font-weight: bold;\n`;\n\nexport const Input = styled.input`\n  margin-right: 10px;\n`;\n\nexport const Button = styled.button``;\n","import { nanoid } from 'nanoid';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { requestAddContactThunk } from 'redux/thunks';\nimport { selectContacts } from 'redux/selectors';\nimport { Button, Container, Input, Label } from './ContactForm.styled';\n\nconst ContactsForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n\n  const formatPhoneNumber = event => {\n    const input = event.target;\n    let value = input.value.replace(/\\D/g, '');\n\n    if (value.length > 6) {\n      value = value.replace(/(\\d{3})(\\d{2})(\\d{2})/, '$1-$2-$3');\n    }\n\n    input.value = value;\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n\n    const name = event.currentTarget.elements.name.value;\n    const number = event.currentTarget.elements.number.value;\n\n    if (\n      contacts.some(\n        contact => contact.name === name && contact.number === number\n      )\n    ) {\n      alert(`\"${name}\" is already in contacts!`);\n    } else {\n      dispatch(requestAddContactThunk({ name, number }));\n      event.currentTarget.reset();\n    }\n  };\n\n  return (\n    <Container>\n      <form onSubmit={handleSubmit}>\n        <h2>Contacts</h2>\n        <Label>Name:</Label>\n        <Input\n          type=\"text\"\n          name=\"name\"\n          required\n          id={nanoid()}\n          placeholder=\"Ivan\"\n        />\n        <Label>Number:</Label>\n        <Input\n          type=\"tel\"\n          name=\"number\"\n          required\n          placeholder=\"000-00-00\"\n          onInput={formatPhoneNumber}\n        />\n        <Button type=\"submit\">Add contact</Button>\n      </form>\n    </Container>\n  );\n};\n\nexport default ContactsForm;\n","import styled from '@emotion/styled';\n\nexport const Title = styled.h2`\n  margin-left: 20px;\n  margin-top: 25px;\n  font-size: 20px;\n`;\n\nexport const Paragraph = styled.p`\n  margin-left: 20px;\n  color: grey;\n`;\n\nexport const Input = styled.input`\n  width: 200px;\n  height: 30px;\n  margin-left: 20px;\n  margin-bottom: 10px;\n`;\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectFilter } from 'redux/selectors';\nimport { onFilterChange } from 'redux/phoneBookReducer';\nimport { Input, Paragraph, Title } from './Filter.styled';\n\nexport const Filter = ({ type }) => {\n  const filter = useSelector(selectFilter);\n  const dispatch = useDispatch();\n  const onFilter = event => {\n    const inputValue = event.target.value;\n    dispatch(onFilterChange(inputValue));\n  };\n  return (\n    <div>\n      <Title>Contacts</Title>\n      <Paragraph>Find contact by name</Paragraph>\n      <Input type={type} value={filter} onChange={onFilter}></Input>\n    </div>\n  );\n};\n","import { ContactList } from 'components/ContactList/ContactList';\n// import { Filter } from 'components/Filter/Filter';\n// import { onFilterChange } from 'redux/phoneBookReducer';\nimport ContactsForm from 'components/ContactsForm/ContactsForm';\nimport { Filter } from 'components/Filter/Filter';\nimport React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n// import { useNavigate } from 'react-router-dom';\nimport { selectUserData } from 'redux/selectors';\nimport { requestPhoneBookThunk } from 'redux/thunks';\n\nconst Contacts = () => {\n  const dispatch = useDispatch();\n  const userData = useSelector(selectUserData);\n  // const contacts = useSelector(selectContacts);\n  // const filter = useSelector(selectFilter);\n\n  useEffect(() => {\n    if (!userData) return;\n    dispatch(requestPhoneBookThunk());\n  }, [dispatch, userData]);\n\n  // const handleFormSubmit = ({ name, phone }) => {\n  //   const hasDuplicateContacts = contacts.some(\n  //     contact => contact.name === name && contact.phone === phone\n  //   );\n  //   if (hasDuplicateContacts) {\n  //     alert(`\"${name}\" is already in contacts!`);\n  //     return;\n  //   }\n  //   dispatch(requestAddContactThunk({ name, phone }));\n  // };\n\n  return (\n    <div>\n      <ContactsForm />\n      <Filter label=\"Name\" type=\"text\" />\n      <ContactList />\n    </div>\n  );\n};\n\nexport default Contacts;\n"],"names":["nanoid","size","crypto","getRandomValues","Uint8Array","reduce","id","byte","toString","toUpperCase","Button","styled","ContactList","contacts","useSelector","selectFilterContacts","dispatch","useDispatch","map","name","number","className","type","onClick","requestDeleteContactThunk","onDelete","Container","Label","Input","selectContacts","onSubmit","event","preventDefault","currentTarget","elements","value","some","contact","alert","requestAddContactThunk","reset","required","placeholder","onInput","input","target","replace","length","Title","Paragraph","Filter","filter","selectFilter","onChange","inputValue","onFilterChange","userData","selectUserData","useEffect","requestPhoneBookThunk","label"],"sourceRoot":""}